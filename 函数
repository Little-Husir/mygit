#define _CRT_SECURE_NO_WARNINGS 1
#include <stdio.h>
#include <string.h>
#include <Windows.h>
#include <stdlib.h>
#include <math.h>

//int Add(int x, int y)
//{
//	int z = 0;
//	z = x + y;
//	return z;
//}
//int main()
//{
//	int a = 10;
//	int b = 20;
//	int sum = Add(a, b);
//	printf("%d\n", sum);
//
//	return 0;
//}


//strcpy 库函数的使用
//int main()
//{
//	//strcpy string copy---字符串拷贝函数，拷贝的时候'\0'（字符串结束标志）也拷贝了，所以arr2也变成的bit，后面的###就没有了，因为打印的时候遇到'\0'就结束了后面的不再打印；
//	//strlen string length --- 计算字符串长度   去cplusplus.com网站里面搜索相关函数的使用
//	char arr1[] = "bit";
//	char arr2[20] = "#######";
//	strcpy(arr2, arr1);
//	printf("%s\n", arr2);
//
//	return 0;
//}


//memset 库函数的使用 内存设置函数
//int main()
//{
//	char arr[] = "hello word";
//	memset(arr, '*', 5);//  http://en.cppreference.com网站，资料全
//	printf("%s\n", arr);
//	return 0;
//}


//自定义函数，返回两个整数的最大值
//int get_max(int x, int y)
//{
//	if (x > y)
//		return x;
//	if (x < y)
//		return y;
//}
//int main()
//{
//	int a = 10;
//	int b = 20;
//	//函数的使用
//	int max = get_max(a, b);
//	printf("max=%d\n", max);
//	return 0;
//}



//自定义函数，交换两个整数
//方法一
//当实参传给形参的时候，形参其实是实参的一份临时拷贝，对形参的修改是不会改变实参的
//int swap1(int x, int y)//xy在使用时也开辟了一块空间；该方法有问题
//{
//	int tmp = 0;
//	tmp = x;
//	x = y;
//	y = tmp;
//}
//int main()
//{
//	int a = 10;
//	int b = 20;//ab在使用时开辟了一块空间
//	printf("a=%d ,b=%d\n", a, b);
//	//函数的使用
//	swap(a, b);//交换时只是对xy进行了交换，a和b的内容并没有进行交换，
//	printf("a=%d ,b=%d\n", a, b);
//	return 0;
//}


//方法2 指针的用法
//int swap2(int* pa, int* pb)//用一个指针变量接收存储ab的地址  pa,pb 为形参，形参只有在函数被调用过程中才实例化（分配内存单元），
                             //形参当函数被调用完成之后就自动销毁了，因此形参只在函数中有效
//{
//	int tmp = 0;
//	tmp = *pa;//解引用a，将a的值赋值给tmp
//	*pa = *pb;
//	*pb = tmp;
//}
//int main()
//{
//	int a = 10;
////	int* pa = &a;//指针变量
////	*pa = 20;//解引用操作，间接找到变量a，解引用操作符，即对pa进行解引用操作，找到它所指向的那个对象a,间接访问操作符，
//////解引用意思："*"的作用是引用指针指向的变量值，引用其实就是引用该变量的地址，“解”就是把该地址对应的东西解开，解出来，就像打开一个包裹一样，
//////那就是该变量的值了，所以称为“解引用”。也就是说，解引用是返回内存地址中对应的对象。
//	int b = 20;
//	printf("a=%d ,b=%d\n", a, b);
//	//函数的使用
//	swap2(&a, &b);//将ab的地址传入函数  &a,&b 实参，真实传给函数的参数，他们必须都有确定的值，以便把这些值传给形参，实参可以是常量，变量，表达式，函数等；
//	printf("a=%d ,b=%d\n", a, b);
//	return 0;
//}


/*
以上两种方法的总结：
    传值调用：函数的形参和实参分别占用不同内存块，对形参的修改不会影响到实参
    传址调用：
        传址调用是吧函数外部创建变量的内存地址传递给函数参数的一种调用函数的方式
        这种传参方式可以让函数和函数外边的变量建立起真正的联系，也就是函数内部可以直接操作函数外部的变量

*/


//函数练习：
//1.写一个函数可以判断一个数是不是素数
//2写一个函数判断一年是不是闰年
//3.写一个函数，实现一个整型有序数组的二分查找
//4.写一个函数，每调用一次这个函数，就会将num的值加一

//第一题
//是素数返回1，不是素数返回0
//int is_prime(int n)
//{
//    int j = 0;
//    for (j = 2; j <= sqrt(n); j++)
//    {
//        if (n % j == 0)
//            return 0;
//    }
//    return 1;
//}
//int main()
//{
//    //打印100-200之间的素数
//    int i = 0;
//    for (i = 100; i <= 200; i++)
//    {
//        //判断i是否为素数
//        if (is_prime(i) == 1)
//            printf("%d ", i);
//    }
//	return 0;
//}

//2写一个函数判断一年是不是闰年
//int is_leap_year(int y)//函数在设计时要单一，干净
//{
//    if ((y % 4 == 0 && y % 100 != 0) || (y % 400) == 0)
//    {
//        return 1;
//    }
//    else
//       return 0;
//}
//int main()
//{
//    int year = 0;
//    for (year = 1000; year <= 2000; year++)
//    {
//        //判断year是否为闰年
//        if (1 == is_leap_year(year))
//        {
//            printf("%d ", year);
//        }
//    }
//	return 0;
//}


//3.写一个函数，实现一个整型有序数组的二分查找*************
//int binary_search(int arr[], int k,int sz) //本质上这里的arr是一个指针
//{
//	//算法的实现
//	//int sz = sizeof(arr) / sizeof(arr[0]);//实参传给形参时不能这样求元素个数
//	int left = 0;//左下标
//	int right = sz - 1;//右下标
//
//	while (left<=right)
//	{
//		int mid = (left + right) / 2;
//		if (arr[mid] > k)
//		{
//			right = mid - 1;
//		}
//		else if (arr[mid] < k)
//		{
//			left = mid + 1;
//		}
//		else
//		{
//			return mid;
//			break;
//		}
//	}
//	return -1;
//}
//int main()
//{
//    //二分查找，在一个有序数组中查找摸一个数
//	//如果找到了返回这个数的下标，找不到返回-1
//	//写一个代码，在arr[]有序数组中找到数字7；
//    int arr[] = { 1,2,3,4,5,6,7,8,9,10 };
//	int sz = sizeof(arr) / sizeof(arr[0]);
//	int k = 7;
//	int ret = binary_search(arr, k,sz);//这里的实参arr传给函数的不是数组的所有数据，只是数组的首元素的地址
//	if (ret == -1)
//	{
//		printf("找不到指定的数字\n");
//	}
//	else
//		printf("找到了，下标是：%d\n", ret);
//	return 0;
//}

//4.写一个函数，每调用一次这个函数，就会将num的值加一
//void Add(int* p)
//{
//    (*p)++;
// }
//int main()
//{
//    int num = 0;
//    Add(&num);
//    printf("num=%d\n", num);
//    Add(&num);
//    printf("num=%d\n", num);
//    Add(&num);
//    printf("num=%d\n", num);
//	return 0;
//}


//函数的嵌套调用和链式访问：
//函数的嵌套调用：函数和函数之间可以有机的组合的
//void new_line()
//{
//    printf("hehe\n");
//}
//void three_line()
//{
//    int i = 0;
//    for (i = 0; i < 3; i++)
//    {
//        new_line();
//    }
//}
//int main()
//{
//    three_line();
//	return 0;
//}



//函数的链式访问：把一个函数的返回值作为另一个函数的参数
//int main()
//{
//    int len = 0;
//    //第一种写法
//    len = strlen("abc");
//    printf("%d\n", len);
//    //第二种写法
//    printf("%d\n", strlen("abc"));
//	return 0;
//}


//int main()
//{
//    printf("%d", printf("%d", printf("%d", 43)));//printf函数文档里面函数类型为int，结果为打印字符的个数，所以先打印43，之后打印字符个数所以是2，然后是1
//	return 0;
//}

//*************************函数的声明和定义,实际用法，把函数的声明放在头文件里面，把函数的定义重新放在一个.c文件里面，使用这个函数是引用一下声明的头文件即可；
//函数的声明,声明一般函数使用之前，即满足先声明后使用
//int Add(int x, int y);
//#include "Add.h"
//int main()
//{
//    int a = 10;
//    int b = 20;
//    int sum = 0;
//    //函数调用
//    sum = Add(a, b);
//    printf("%d\n", sum);
//	return 0;
//}
////函数的定义，如果是在主函数之后，主函数调用时就会爆出警告，显示函数未声明
//int Add(int x, int y)
//{
//    int z = x + y;
//    return z;
//}


//函数的递归
/*
程序调用自身的编程技巧成为递归。递归作为一种算法在程序设计语言中广泛应用，一个过程或函数在其定义或说明中有直接或间接调用自身的一种方法，
它通常把一个大型复杂的问题层层转化为一个与原问题相似的规模较小的问题来求解，递归策略只需少量的程序就可描述出解题过程所需要的多次重复计算，
大大的减少了程序的代码量，************递归的主要思考方式在于把大事化小
递归的两个必要条件
      1.存在限制条件，当满足这个限制条件时，递归便不再继续
      2.每次递归调用之后越来越接近这个限制条件

      stack overflow :递归常见错误，栈溢出
*/
//int main()
//{
//    printf("hehe\n");
//    main();
//	return 0;
//}

////练习1：接收一个整型值，按照顺序打印它的每一位，列如，输入1234，打印1 2 3 4
//print(int n)
//{
//    if (n > 9)
//    {
//        print(n / 10);//当n等于1时结束调用，开始打印，之后回到上一次调用，此时n=12开始打印2，之后再回到上一次调用，此时n=123，打印3，一次类推，调用结束后回到上一次调用开始的地方；
//        //递归和回溯，回溯就是返回到上一次调用开始的地方
//    }
//    printf("%d", n % 10);
//}
//int main()
//{
//    unsigned int num = 0;
//    scanf("%d", &num);
//    //递归
//    print(num);
//	return 0;
//}


//练习2：编写函数不允许创建临时变量，求字符串长度
//int my_strlen(char* str)
//{
//    int count = 0;//count是临时变量，与题目要求不符
//    while (*str != '\0')
//    {
//        count++;
//        str++;
//    }
//    return count;
//}


//采用递归的方法
//int my_strlen(char* str)
//{
//    if (*str != '\0')
//        return 1 + my_strlen(str + 1);//之后1+0开始回溯，之后1+1回溯，以此类推，相当于栈的用法
//    else
//        return 0;//return 0开始回溯，
//}
//int main()
//{
//    char arr[] = "bit";
//    //int len = strlen(arr);//求字符串长度，用的是strlen函数，题目要求是写一个函数，模拟strlen函数
//    //printf("%d\n", len);
//    int len = my_strlen(arr);//arr是数组，数组传参，传过去的不是整个数组，而是第一个元素的地址
//    printf("len = %d\n", len);
//	return 0;
//}


//递归与迭代
//练习求n的阶乘
//int factorial(int n)
//{
//    if (n <= 1)
//        return 1;
//    else
//        return n * factorial(n - 1);
//}
//int main()
//{
//    int n = 0;
//    printf("请输入n：\n");
//    scanf("%d", &n);
//    int s = factorial(n);
//    printf("n的阶乘为%d\n", s);
//	return 0;
//}


//练习4：求第n个斐波那契数
//方法1，递归
//int count = 0;
//int fib(int n)
//{
//
//    if (n == 3)
//    {
//        count++;//n=3时被计算了多少次，当n=40时，3被计算了3000多万次，重复的计算太多，所以用递归不方便
//    }
//    if (n <= 2)
//        return 1;
//    else
//        return fib(n - 1)+ fib(n - 2);
//}

//方法2，循环
//int fib(int n)
//{
//    int a = 1;
//    int b = 1;
//    int c = 1;
//    while (n > 2)
//    {
//        c = a + b;
//        a = b;
//        b = c;
//        n--;
//    }
//    return c;
//}
//int main()
//{
//    int n = 0;
//    printf("请输入n：\n");
//    scanf("%d", &n);
//    //先说这个函数该怎么用，再去具体实现，叫做TDD--测试驱动开发
//    int s = fib(n);
//    printf("第n个斐波那契数为%d\n", s);
//	return 0;
//}

//思考汉诺塔和青蛙跳台问题
