#define _CRT_SECURE_NO_WARNINGS 1
#include <stdio.h>
#include <string.h>
#include <Windows.h>
#include <stdlib.h>
#include <math.h>

/*
   结构体：
      *结构体类型的声明
      *结构体的初始化
      *结构体成员访问
      *结构体传参
   结构体的声明：
       基础知识：结构是一些值的集合，这些值称为成员变量，结构的每个成员可以是不同类型的变量
       结构的声明：示例如下
       结构体的类型可以是标量，数组，指针，甚至是其他结构体
   结构体变量的定义和初始化：
   结构体成员的访问：
       *结构体变量的成员是通过点操作符（.）访问的，点操作符接受两个操作数
       *结构体指针访问指向变量的成员，有时候我们得到的不是一个结构体变量，而是指向一个结构体的指针
       *结构体传参
*/

//结构体的声明
//例如描述一个学生：
//typedef struct Stu//重新给结构体类型命名，开始是struct Stu，使用typedef后为Stu
//{
//    char name[20];
//    int age;
//    char tele[12];
//    char sex[5];
//}Stu;
//struct结构体关键字 Stu结构体标签   struct Stu 结构体类型
// struct Stu//定义一个结构体类型
//{
//     //成员变量
//    char name[20];
//    int age;
//    char tele[12];
//    char sex[5];
//}s1,s2,s3;//s1,s2,s3是三个全局的结构体变量
//int main()
//{
//    struct Stu s;//struct Stu 结构体类型 s创建一个局部的结构体变量 
//    Stu s = { "张三",20,"15452353","男" };//结构体初始化，赋初值
//    return 0;
//}

////结构体变量的定义和初始化
//struct Point
//{
//    int x;
//    int y;
//}p1;   //声明类型的同时定义变量p1
//
//int main()
//{
//    struct Point p2;//定义结构体变量p2
////初始化，定义变量的同时赋初值
//    struct Point p3 = { 1,2 };
//    return 0;
//}

//结构体成员的初始化和访问形式
//struct S
//{
//    int a;
//    char c;
//    char arr[20];
//    double d;
//};
//struct T
//{
//    char ch[10];
//    struct S s;
//    char* pc;
//};
//int main()
//{
//    char arr[] = "hello bit\n";
//    struct T t = { "hehe",{100,'w',"hello wold",3.14},arr };
//    printf("%s\n", t.ch);//hehe
//    printf("%s\n", t.s.arr);//hello word
//    printf("%lf\n", t.s.d);//3.14
//    printf("%s\n", t.pc);//hello bit
//    return 0;
//}


//结构体成员的访问和传参
//typedef struct Stu
//{
//    char name[20];
//    int age;
//    char tele[12];
//    char sex[5];
//}Stu;
//void print1(Stu s)
//{
//    printf("name:%s\n", s.name);
//    printf("age:%d\n", s.age);
//    printf("tele:%s\n", s.tele);
//    printf("sex:%s\n", s.sex);
//}
//void print2(Stu* ps)
//{
//    printf("name:%s\n", ps->name);
//    printf("age:%d\n", ps->age);
//    printf("tele:%s\n", ps->tele);
//    printf("sex:%s\n", ps->sex);
//}
//int main()
//{
//    Stu s = { "李四",40,"1588355558","男" };
//    //打印结构体数据
//    //print1和print2那个更好
//    /*
//         print1:使用时，形参会临时拷贝一份实参，如果传过去的结构体很大，那么形参拷贝时会占用空间和时间，造成空间浪费，虽然函数
//                 调用完之后会自动销毁，
//         print2:函数传参的时候，参数是需要压栈的，如果传递一个结构体对象的时候，结构体过大，参数压栈的系统开销比较大，所以
//                会导致性能的下滑，用地址传参的话只开辟一块地址的空间，即四或八个字节，系统开销较小
//         结论：结构体传参的时候，要传结构体的地址
//    */
//    print1(s);
//    print2(&s);
//    return 0;
//}

//压栈的理解
/*
     整个系统内存分为三个区域，分别为栈区，堆区，和静态区
                             栈区存放的有：局部变量，函数的形参，函数调用也会开辟空间
                             堆区：动态内存分配，malloc/free，realloc，calloc
                             静态区：全局变量，静态变量
           数据结构：
                   线性数据结构：顺序表，链表，栈，队列
                   树形数据结构：二叉树，图
                   顺序表：|1|2|3|4|5|6| 按照顺序依次存储
                   链表：|1|          |4|     |6|   数据在不同的区域块中，用指针将他们串联起来，通过指针找到所有数据
                             \|2|     /  \|5|/
                                  \|3|              
                   栈：先进后出，后进先出，如果要删除栈顶的元素，可以直接删，但是要删除栈顶下面的数据，必须将前面的数据删除完毕轮到这条数据才行
                       压栈：插入一个元素
                       出栈：删除一个元素
                                 百度搜：函数栈帧的创建和销毁                    
                                             
            _____________                     
           |             |
           |             |
           |_____________|
           |_____________|                       @是Add函数调用时开辟的空间
           |_____________|                       #是形参开辟的空间
           |_____________|                       *是main函数开辟的空间
           |_____z_______|@                           压栈操作
           |____a1（x）__|#                                   
           |____b1（y）__|#
           |_____ret_____|*
           |_____b_______|*
           |_____a_______|*
            





*/
int Add(int x, int y)
{
    int z = 0;
    z = x + y;
    return z;
}
int main()
{
    int a = 10;
    int b = 20;
    int ret = 0;
    ret = Add(a, b);//传递参数的时候，先传b再传a
    return 0;
}
