#define _CRT_SECURE_NO_WARNINGS 1
#include <stdio.h>
#include <string.h>
#include <Windows.h>
#include <stdlib.h>
#include <math.h>
#include<assert.h>

/*
       *什么是bug?
              计算机的程序错误，或者与预期的结果不符
       *调试是什么？有多重要？
              调试就是找bug的一个过程，顺着程序一步步走，总会发现问题，然后解决问题，达到想要的结果
              调试（debug），又称除错，是发现和减少计算机程序或电子仪器设备中程序错误的一个过程
              调试的基本步骤： 
                    发现程序错误的存在  1.程序员  2.软件测试人员 3用户    发现软件问题的先后，程序员发现bug并解决的代价是最低的
                    以隔离，消除方式对错误进行定位
                    确定错误产生的原因
                    提出纠正错误的解决办法
                    对程序错误予以改正，重新测试
       *debug和release的介绍
              debug：通常称为调试版本，它包含调试信息，并且不做任何优化，便于程序员调试程序
              release：称为发布版本，它往往是进行了各种优化，使得程序在代码大小和运行速度上都是最优的，以便用户很好的使用，这个模式下不能调试了
       *windows环境调试介绍
              调试快捷键：f5开始调试 f9断点 f10逐过程执行，单步执行 f11 逐语句执行 跳到函数内部执行
              调试的时候查看程序当前信息
                  查看临时变量的值
                  查看寄存器
                  查看内存等等；
       *一些调试的实例
              在下面
       *如何写出好（易于调试的代码）
              优秀的代码：
                  1.代码运行正常
                  2.bug很少
                  3.效率高
                  4.可读性高
                  5.可维护性高
                  6.注释清晰
                  7.文档齐全
       *编程常见的错误
*/

//int main()
//{
//    int i = 0;
//    for (i = 0; i < 100; i++)
//    {
//        printf("%d  ", i);
//    }
//
//    return 0;
//}


//int main()
//{
//    int arr[10] = { 0 };
//    int i = 0;
//    for (i = 0; i < 10; i++)
//    {
//        arr[i] = i;
//    }
//    return 0;
//}

//调用堆栈窗口   像栈一样展示函数调用的逻辑
//void test2()
//{
//    printf("hehe\n");
//}
//void test1()
//{
//    test2();
//}
//void test()
//{
//    test1();
//}
//int main()
//{
//    test();
//    return 0;
//}


//一些调试的实例
//实现代码：求1！+2！+3！+......+n！，不考虑溢出
//int main()
//{
//    int i = 0;
//    int sum = 0;
//    int n = 0;
//    int ret = 1;
//    scanf("%d", &n);
//    for (i = 1; i <= n; i++)
//    {
//        int j = 0;
//         ret = 1;
//        for (j = 1; j <= i; j++)
//        {
//            ret *= j;
//        }
//        sum += ret;
//    }
//    printf("%d\n", sum);
//    return 0;
//}

//实例2：死循环
//int main()
//{
//    int i = 0;
//    int arr[10] = { 1,2,3,4,5,6,7,8,9,10 };
//    for (i = 0; i <= 12; i++)
//    {
//        printf("hehe\n");
//        arr[i] = 0;//这里的arr[12]和i的地址相同，当i=12时，arr[12]=0，即i重新赋值为0，再次进入循环，所以造成了死循环
//    }
//    return 0;
//}



//模拟字符串拷贝函数
//void my_strcpy(char* dest,char* src)
//{
//    while (*src!='\0')
//    {
//        *dest = *src;
//        src++;
//        dest++;
//    }
//    *dest = *src;
//}
//int main()
//{
//    char arr1[] = "##############";
//    char arr2[] = "bit";
//    my_strcpy(arr1, arr2);
//    printf("%s\n", arr1);
//    return 0;
//}


//const 修饰变量的值不能被改变
//int main()
//{
//    const int num = 0;
//    const int* p = &num;
//    int* const p = &num;
//    *p = 20;//err const放在指针变量的*的左边时，修饰的是*p，也就是说：不能通过p来改变*p（num）的值
//            //const放在指针变量的*的右边时，修饰的是指针变量本身，p不能被改变了
//    printf("%d\n", num);
//    return 0;
//}

//求字符串长度，用const
int my_strlen(const char* str)
{
    int count = 0;
    assert(str != NULL);//保证指针的有效性
    while (*str != '\0')
    {
        count++;
        str++;
    }
    return count;
}
int main()
{
    char arr[] = "abcdef";
    int len = my_strlen(arr);
    printf("%d\n", len);
    return 0;
}
