#define _CRT_SECURE_NO_WARNINGS 1
#include <stdio.h>
#include <string.h>
#include <Windows.h>
#include <stdlib.h>
#include <math.h>

/*
数组的创建：
  数组是一组相同类型元素的集合，数组的创建方式
  元素类型  数组名字  数组大小(数组大小必须是一个常量表达式)  
      三种方式
        1. int arr[10]     2.int count=10 int arr[count] 错误 因为count是一个变量   3.char arr[10] ;float arr[10]; double arr[10]
数组的初始化：
  数组的初始化是指，在创建数组的同时给数组的内容一些合理初始值
strlen和sizeof区别：
      1.两者之间并没有什么关联
      2.strlen 是求字符串长度的，只能针对字符串求长度                  库函数-使用的引用头文件
      3.sizeof 是计算变量，数组，类型的大小，单位是字节                操作符
*/


//int main()
//{
//    int arr[10] = { 1,2,3 };//不完全初始化，剩下的元素，默认初始化为0
//    char arr2[] = { 'a','b','c' };
//    char arr3[] = "abc";//和上面代码的区别是第三个元素是'\0' 不是0
//    char arr4[] = "abcdef";//如果不指定元素大小就必须给数组初始化
//    printf("%d\n", sizeof(arr4));//sizeof计算数组大小包括\0       计算arr4所占空间大小
//    printf("%d\n", strlen(arr4));//strlen计算数组大小时不包括\0       求字符串长度，到\0就停止计算
//    printf("%d\n", sizeof(arr2));
//    printf("%d\n", sizeof(arr3));
//    printf("%d\n", strlen(arr2));//随机值
//    printf("%d\n", strlen(arr3));
//	return 0;
//}



//int main()
//{
//    //char arr[] = "abcdef";
//    //int i = 0;
//    //int len = strlen(arr);
//    //for (i = 0; i < len; i++)
//    //{
//    //    printf("%c ", arr[i]);
//    //}
//    int arr[] = { 1,2,3,4,5,6 };
//    int sz = sizeof(arr) / sizeof(arr[0]);
//    int i = 0;
//    for (i = 0; i < sz; i++)
//    {
//            printf("%d ", arr[i]);
//    }
//	return 0;
//}


//一维数组在内存中的存储
//int main()
//{
//    int arr[] = { 1,2,3,4,5,6,7,8,9,10 };
//    int sz = sizeof(arr) / sizeof(arr[0]);
//    int i = 0;
//    for (i = 0; i < sz; i++)
//    {
//        printf("&arr[%d] = %p\n", i, &arr[i]);//数组在内存中是连续存放的 由低地址到高地址
//    }
//	return 0;
//}


//二维数组的创建和初始化
//int main()
//{
//    int arr[3][4] = { {1,2,3},{4,5} };//1,2,3三个元素放在第一行，4,5放在第二行，其他初始化为0，，，，二维数组的列是不能省略的比如arr[][4]
//    int i = 0;
//    for (i = 0; i < 3; i++)
//    {
//        int j = 0;
//        for (j = 0; j < 4; j++)
//        {
//            printf("%d ", arr[i][j]);//打印二维数组的每个元素；
//        }
//        printf("\n");
//    }
//	return 0;
//}


//二维数组在内存中的存储
//int main()
//{
//    int arr[3][4] = { {1,2,3},{4,5} };//1,2,3三个元素放在第一行，4,5放在第二行，其他初始化为0，，，，二维数组的列是不能省略的比如arr[][4]
//    int i = 0;
//    for (i = 0; i < 3; i++)
//    {
//        int j = 0;
//        for (j = 0; j < 4; j++)
//        {
//            printf("&arr[%d][%d] = %p ", i,j,&arr[i][j]);//打印二维数组的每个元素地址，地址也是连续的；  [1][2][3][0][4][5][0][0][0][0][0][0]连续的地址
//        }
//        printf("\n");
//    }
//	return 0;
//}


//数组作为函数参数：比如我要实现一个冒泡排序（这里主要讲算法思想）函数将一个整型数组排序，那我们将会这样使用该函数
/*
            冒泡排序
     比如 10,9,8,7,6,5,4,3,2,1   冒泡排序会把两两相邻的数字进行比较交换
*/
//void bubble_sort(int arr[],int sz)
//{
//    //确定冒泡排序的趟数
//    int i = 0;
//    for (i = 0; i < sz-1; i++)
//    {
//        int flag = 1;//假设这一趟排序的数据已经有序
//        //每一趟冒泡排序
//        int j = 0;
//        for (j = 0; j <sz-1-i ; j++)
//        {
//            if (arr[j] > arr[j + 1])
//            {
//                int tmp = arr[j];
//                arr[j] = arr[j + 1];
//                arr[j + 1] = tmp;
//                flag = 0;//本趟排序的数据其实不完全有序
//            }
//        }
//        if (flag == 1)
//        {
//            break;
//        }
//    }
//}
//int main()
//{
//    int arr[] = { 9,15,59,6,8,4,21,2,1,0 };
//    //对arr进行排序，排成升序
//    int sz = sizeof(arr) / sizeof(arr[0]);
//    int i = 0;
//    bubble_sort(arr,sz);//冒泡排序函数
//    for (i = 0; i < sz; i++)
//    {
//        printf("%d ", arr[i]);
//    }
//	return 0;
//}



int main()
{
    int arr[] = { 1,2,3,4,5,6,7 };
    int sz = sizeof(arr) / sizeof(arr[0]);
    printf("%p\n", arr);
    printf("%p\n", arr+1);
    printf("%p\n", &arr[0]);
    printf("%p\n", &arr[0]+1);
    printf("%p\n", &arr);
    printf("%p\n", &arr+1);//&arr是取整个数组的地址，这里加一是加了一个数组的地址，
    printf("%d\n", *arr);
	return 0;//结论：数组名是数组首元素的地址，（有两个例外）1.sizeof(数组名) 计算的是整个数组的大小，单位是字节 2.&arr   &数组名 取出的是整个数组的地址
}



//int main()
//{
//	return 0;
//}
